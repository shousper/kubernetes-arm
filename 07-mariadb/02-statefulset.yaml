---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
        - name: init-mysql
          image: arm64v8/mariadb:10.0
          command:
            - bash
            - "-c"
            - |
              set -e

              # Generate mysql server-id from pod ordinal index.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf

              # Add an offset to avoid reserved server-id=0 value.
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf

              # Copy appropriate conf.d files from config-map to emptyDir.
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
      containers:
        - name: mysql
          image: arm64v8/mariadb:10.0
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "1"
            - name: MYSQL_ROOT_HOST
              value: "%"
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              # Check we can execute queries over TCP (skip-networking is off).
              command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - "-c"
                  - |
                    set -e
                    cd /var/lib/mysql

                    # Generate mysql server-id from pod ordinal index.
                    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
                    ordinal=${BASH_REMATCH[1]}

                    # If master, setup remote root access
                    [[ $ordinal == 0 ]] && exit 0

                    echo "Waiting for mysqld to be ready (accepting connections)"
                    until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

                    echo "Initializing replication.."
                    mysql -h 127.0.0.1 >/tmp/slave-status <<EOF
                    SHOW SLAVE STATUS;
                    EOF

                    cat /tmp/slave-status

                    if grep "mysql-0.mysql" /tmp/slave-status; then
                      echo "Already slaving away."
                      exit 0
                    fi

                    mysql -h 127.0.0.1 <<EOF
                    CHANGE MASTER TO MASTER_HOST='mysql-0.mysql',
                    MASTER_USER='root',
                    MASTER_PASSWORD='',
                    MASTER_CONNECT_RETRY=10;

                    START SLAVE;
                    EOF
      volumes:
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Gi
